{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import fetchPonyfill from \"fetch-ponyfill\";\nimport Web3 from \"web3\";\nimport { JsonRpcPayload } from \"web3-providers\";\nimport { JsonRPCRequest, JsonRPCResponse } from \"web3-providers\";\nimport { Subprovider } from \"@0x/subproviders\";\nimport { JSONRPCRequestPayload } from \"ethereum-types\";\n\n//import { VERSION } from \"./version\";\n\nconst { fetch, Headers } = fetchPonyfill();\n\nconst RATE_LIMIT_STATUS = 429;\nconst DEFAULT_MAX_RETRIES = 3;\nconst DEFAULT_RETRY_INTERVAL = 1000;\nconst DEFAULT_RETRY_JITTER = 250;\n\nexport type ErrorCallback = (err: Error | null, data?: any) => void;\nexport type Callback = () => void;\n\nexport interface AlchemyWeb3Config {\n  writeProvider?: Provider | null;\n  maxRetries?: number;\n  retryInterval?: number;\n  retryJitter?: number;\n}\n\ntype FullConfig = { [K in keyof AlchemyWeb3Config]-?: AlchemyWeb3Config[K] };\n\nexport type Provider =\n  | {\n      sendAsync: SendFunction;\n    }\n  | {\n      send: SendFunction;\n    };\n\nexport type SendFunction = (payload: any, callback: any) => void;\n\nexport interface AlchemyWeb3 extends Web3 {\n  alchemy: AlchemyMethods;\n  setWriteProvider(provider: Provider): void;\n}\n\nexport interface AlchemyMethods {\n  getTokenAllowance(\n    params: TokenAllowanceParams,\n    callback?: Web3Callback<TokenAllowanceResponse>,\n  ): Promise<TokenAllowanceResponse>;\n  getTokenBalances(\n    address: string,\n    contractAddresses: string[],\n    callback?: Web3Callback<TokenBalancesResponse>,\n  ): Promise<TokenBalancesResponse>;\n  getTokenMetadata(\n    address: string,\n    callback?: Web3Callback<TokenMetadataResponse>,\n  ): Promise<TokenMetadataResponse>;\n}\n\nexport interface TokenAllowanceParams {\n  contract: string;\n  owner: string;\n  spender: string;\n}\n\nexport type TokenAllowanceResponse = string;\n\nexport interface TokenBalancesResponse {\n  address: string;\n  tokenBalances: TokenBalance[];\n}\n\nexport type TokenBalance = TokenBalanceSuccess | TokenBalanceFailure;\n\nexport interface TokenBalanceSuccess {\n  address: string;\n  tokenBalance: string;\n  error: null;\n}\n\nexport interface TokenBalanceFailure {\n  address: string;\n  tokenBalance: null;\n  error: string;\n}\n\nexport interface TokenMetadataResponse {\n  decimals: number | null;\n  logo: string | null;\n  name: string | null;\n  symbol: string | null;\n}\n\nexport type Web3Callback<T> = (error: Error | null, result?: T) => void;\n\ninterface EthereumWindow extends Window {\n  ethereum?: any;\n}\n\ndeclare const window: EthereumWindow;\n\nconst ALCHEMY_DISALLOWED_METHODS: string[] = [\n  \"eth_accounts\",\n  \"eth_sendRawTransaction\",\n  \"eth_sendTransaction\",\n  \"eth_sign\",\n  \"eth_signTypedData_v3\",\n  \"eth_signTypedData\",\n  \"personal_sign\",\n];\n\nconst ALCHEMY_HEADERS = new Headers({\n  //\"Accept\": \"application/json\",\n  //\"Content-Type\": \"text/plain\"\n  //\"Content-Type\": \"application/json\",\n  //\"Alchemy-Web3-Version\": VERSION, // causes excessive OPTIONS requests\n});\n\nexport function createAlchemyWeb3(\n  alchemyUrl: string,\n  config: AlchemyWeb3Config,\n): AlchemyWeb3 {\n  const fullConfig = fillInConfigDefaults(config);\n  let currentProvider = fullConfig.writeProvider;\n  function sendAsync(\n    payload: JsonRpcPayload,\n    callback: Web3Callback<JsonRPCResponse>,\n  ): void {\n    callWhenDone(\n      promisedSend(payload, alchemyUrl, currentProvider, fullConfig),\n      callback,\n    );\n  }\n  const alchemyWeb3 = new Web3({ sendAsync } as any) as AlchemyWeb3;\n  alchemyWeb3.setProvider = () => {\n    throw new Error(\n      \"setProvider is not supported in Alchemy Web3. To change the provider used for writes, use setWriteProvider() instead.\",\n    );\n  };\n  alchemyWeb3.setWriteProvider = provider => (currentProvider = provider);\n  alchemyWeb3.alchemy = {\n    getTokenAllowance: (params: TokenAllowanceParams, callback) =>\n      callAlchemyMethod({\n        alchemyUrl,\n        callback,\n        params: [params],\n        method: \"alchemy_getTokenAllowance\",\n        config: fullConfig,\n      }),\n    getTokenBalances: (address, contractAddresses, callback) =>\n      callAlchemyMethod({\n        alchemyUrl,\n        callback,\n        method: \"alchemy_getTokenBalances\",\n        params: [address, contractAddresses],\n        processResponse: processTokenBalanceResponse,\n        config: fullConfig,\n      }),\n    getTokenMetadata: (address, callback) =>\n      callAlchemyMethod({\n        alchemyUrl,\n        callback,\n        params: [address],\n        method: \"alchemy_getTokenMetadata\",\n        config: fullConfig,\n      }),\n  };\n  return alchemyWeb3;\n}\n\nexport class AlchemySubprovider extends Subprovider {\n  private readonly alchemyUrl: string;\n  private readonly config: AlchemyWeb3Config;\n  public readonly alchemy: AlchemyMethods;\n\n  /**\n   * Instantiates a new AlchemySubprovider\n   */\n  constructor(alchemyUrl: string, config: AlchemyWeb3Config) {\n    super();\n\n    this.alchemyUrl = alchemyUrl;\n    this.config = fillInConfigDefaults(config);\n    this.alchemy = {\n      getTokenAllowance: (params: TokenAllowanceParams, callback) =>\n        callAlchemyMethod({\n          alchemyUrl,\n          callback,\n          params: [params],\n          method: \"alchemy_getTokenAllowance\",\n          config: this.config as FullConfig,\n        }),\n      getTokenBalances: (address, contractAddresses, callback) =>\n        callAlchemyMethod({\n          alchemyUrl,\n          callback,\n          method: \"alchemy_getTokenBalances\",\n          params: [address, contractAddresses],\n          processResponse: processTokenBalanceResponse,\n          config: this.config as FullConfig,\n        }),\n      getTokenMetadata: (address, callback) =>\n        callAlchemyMethod({\n          alchemyUrl,\n          callback,\n          params: [address],\n          method: \"alchemy_getTokenMetadata\",\n          config: this.config as FullConfig,\n        }),\n    };\n  }\n\n  /**\n   * This method conforms to the web3-provider-engine interface.\n   * It is called internally by the ProviderEngine when it is this subproviders\n   * turn to handle a JSON RPC request.\n   * @param payload JSON RPC payload\n   * @param next Callback to call if this subprovider decides not to handle the request\n   * @param end Callback to call if subprovider handled the request and wants to pass back the request.\n   */\n  public async handleRequest(\n    payload: JSONRPCRequestPayload,\n    next: Callback,\n    end: ErrorCallback,\n  ): Promise<void> {\n    if (ALCHEMY_DISALLOWED_METHODS.indexOf(payload.method) === -1) {\n      try {\n        const data = await sendToAlchemyWithRetries(\n          payload,\n          this.alchemyUrl,\n          this.config as FullConfig,\n        );\n        if (data.error) {\n          next();\n          return;\n        }\n        end(null, data.result);\n        return;\n      } catch (alchemyError) {\n        next();\n        return;\n      }\n    } else {\n      next();\n      return;\n    }\n  }\n}\n\nfunction fillInConfigDefaults({\n  writeProvider = getWindowProvider(),\n  maxRetries = DEFAULT_MAX_RETRIES,\n  retryInterval = DEFAULT_RETRY_INTERVAL,\n  retryJitter = DEFAULT_RETRY_JITTER,\n}: AlchemyWeb3Config): FullConfig {\n  return { writeProvider, maxRetries, retryInterval, retryJitter };\n}\n\nasync function promisedSend(\n  payload: JsonRpcPayload,\n  alchemyUrl: string,\n  writeProvider: Provider | null,\n  config: FullConfig,\n): Promise<JsonRPCResponse> {\n  if (ALCHEMY_DISALLOWED_METHODS.indexOf(payload.method) === -1) {\n    try {\n      return await sendToAlchemyWithRetries(payload, alchemyUrl, config);\n    } catch (alchemyError) {\n      // Fallback to write provider, but if both fail throw the error from\n      // Alchemy.\n      if (!writeProvider) {\n        throw alchemyError;\n      }\n      try {\n        return await sendToProvider(payload, writeProvider);\n      } catch {\n        throw alchemyError;\n      }\n    }\n  } else {\n    if (!writeProvider) {\n      throw new Error(`No provider available for method \"${payload.method}\"`);\n    }\n    return sendToProvider(payload, writeProvider);\n  }\n}\n\nasync function sendToAlchemyWithRetries(\n  payload: JsonRpcPayload,\n  alchemyUrl: string,\n  { maxRetries, retryInterval, retryJitter }: FullConfig,\n): Promise<JsonRPCResponse> {\n  let lastResponse: Response;\n  for (let i = 0; i < maxRetries + 1; i++) {\n    lastResponse = await sendToAlchemyOnce(payload, alchemyUrl);\n    if (lastResponse.status !== RATE_LIMIT_STATUS) {\n      return lastResponse.json();\n    }\n    await delay(retryInterval + ((retryJitter * Math.random()) | 0));\n  }\n  return lastResponse!.json();\n}\n\nfunction sendToAlchemyOnce(\n  payload: JsonRpcPayload,\n  alchemyUrl: string,\n): Promise<Response> {\n  return fetch(alchemyUrl, {\n    method: \"POST\",\n    headers: ALCHEMY_HEADERS,\n    body: JSON.stringify(payload),\n  });\n}\n\nfunction sendToProvider(\n  payload: JsonRpcPayload,\n  provider: Provider,\n): Promise<JsonRPCResponse> {\n  const anyProvider: any = provider;\n  if (anyProvider.sendAsync) {\n    return promisify(callback => anyProvider.sendAsync(payload, callback));\n  } else {\n    return promisify(callback => anyProvider.send(payload, callback));\n  }\n}\n\nfunction getWindowProvider(): Provider | null {\n  return typeof window !== \"undefined\" ? window.ethereum : null;\n}\n\ninterface CallAlchemyMethodParams<T> {\n  method: string;\n  params: any[];\n  alchemyUrl: string;\n  config: FullConfig;\n  callback?: Web3Callback<T>;\n  processResponse?(response: any): T;\n}\n\nfunction callAlchemyMethod<T>({\n  method,\n  params,\n  alchemyUrl,\n  config,\n  callback = noop,\n  processResponse = identity,\n}: CallAlchemyMethodParams<T>): Promise<T> {\n  const promise = (async () => {\n    const payload: JsonRPCRequest = { method, params, jsonrpc: \"2.0\", id: 0 };\n    const { error, result } = await sendToAlchemyWithRetries(\n      payload,\n      alchemyUrl,\n      config,\n    );\n    if (error != null) {\n      throw new Error(error);\n    }\n    return processResponse(result);\n  })();\n  callWhenDone(promise, callback);\n  return promise;\n}\n\nfunction processTokenBalanceResponse(\n  rawResponse: TokenBalancesResponse,\n): TokenBalancesResponse {\n  // Convert token balance fields from hex-string to decimal-string.\n  const fixedTokenBalances = rawResponse.tokenBalances.map(balance =>\n    balance.tokenBalance != null\n      ? { ...balance, tokenBalance: hexToDecimal(balance.tokenBalance) }\n      : balance,\n  );\n  return { ...rawResponse, tokenBalances: fixedTokenBalances };\n}\n\n/**\n * Helper for converting functions which take a callback as their final argument\n * to functions which return a promise.\n */\nfunction promisify<T>(f: (callback: Web3Callback<T>) => void): Promise<T> {\n  return new Promise((resolve, reject) =>\n    f((error, result) => {\n      if (error != null) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    }),\n  );\n}\n\n/**\n * Helper for converting functions which return a promise to functions which\n * take a callback as their final argument.\n */\nfunction callWhenDone<T>(promise: Promise<T>, callback: Web3Callback<T>): void {\n  promise.then(result => callback(null, result), error => callback(error));\n}\n\nfunction delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Converts a hex string to a string of a decimal number. Works even with\n * numbers so large that they cannot fit into a double without losing precision.\n */\nfunction hexToDecimal(hex: string): string {\n  if (hex.startsWith(\"0x\")) {\n    return hexToDecimal(hex.slice(2));\n  }\n  // https://stackoverflow.com/a/21675915/2695248\n  const digits = [0];\n  for (let i = 0; i < hex.length; i += 1) {\n    let carry = parseInt(hex.charAt(i), 16);\n    for (let j = 0; j < digits.length; j += 1) {\n      digits[j] = digits[j] * 16 + carry;\n      carry = (digits[j] / 10e16) | 0;\n      digits[j] %= 10e16;\n    }\n    while (carry > 0) {\n      digits.push(carry % 10e16);\n      carry = (carry / 10e16) | 0;\n    }\n  }\n  return digits.reverse().join(\"\");\n}\n\nfunction noop(): void {\n  // Nothing.\n}\n\nfunction identity<T>(x: T): T {\n  return x;\n}\n"]}